/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.32.0
 * Product:       sf06_lf
 * Model-Version: 1.1.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sf06_lf_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

void print_byte_array(uint8_t* array, uint16_t len) {
    uint16_t i = 0;
    printf("0x");
    for (; i < len; i++) {
        printf("%02x", array[i]);
    }
}

TEST_GROUP (SF06_LF_Tests) {
    void setup() {
        sf06_lf_init(0x08);
    }
};

TEST (SF06_LF_Tests, test_stop_continuous_measurement1) {
    int16_t local_error = 0;
    local_error = sf06_lf_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SF06_LF_Tests, test_read_product_identifier1) {
    int16_t local_error = 0;
    uint32_t product_identifier = 0;
    uint8_t serial_number[8] = {0};
    local_error =
        sf06_lf_read_product_identifier(&product_identifier, serial_number, 8);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_identifier");
    printf("product_identifier: %u ", product_identifier);
    printf("serial_number: ");
    print_byte_array(serial_number, 8);
    printf("\n");
}

TEST (SF06_LF_Tests, test_enter_sleep1) {
    int16_t local_error = 0;
    local_error = sf06_lf_enter_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "enter_sleep");
    local_error = sf06_lf_exit_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "exit_sleep");
}

TEST (SF06_LF_Tests, test_start_h2o_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t raw_flow = 0;
    int16_t raw_temperature = 0;
    uint16_t signaling_flags = 0u;
    local_error = sf06_lf_start_h2o_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_h2o_continuous_measurement");
    local_error = sf06_lf_read_measurement_data_raw(&raw_flow, &raw_temperature,
                                                    &signaling_flags);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data_raw");
    printf("raw_flow: %i ", raw_flow);
    printf("raw_temperature: %i ", raw_temperature);
    printf("signaling_flags: %02x\n", signaling_flags);
    local_error = sf06_lf_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SF06_LF_Tests, test_start_ipa_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t raw_flow = 0;
    int16_t raw_temperature = 0;
    uint16_t signaling_flags = 0u;
    local_error = sf06_lf_start_ipa_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_ipa_continuous_measurement");
    local_error = sf06_lf_read_measurement_data_raw(&raw_flow, &raw_temperature,
                                                    &signaling_flags);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data_raw");
    printf("raw_flow: %i ", raw_flow);
    printf("raw_temperature: %i ", raw_temperature);
    printf("signaling_flags: %02x\n", signaling_flags);
    local_error = sf06_lf_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SF06_LF_Tests,
      test_start_single_thermal_conductivity_measurement_async1) {
    int16_t local_error = 0;
    int16_t thermal_conductivity = 0;
    int16_t raw_temperature = 0;
    int16_t raw_delta_temperature = 0;
    local_error = sf06_lf_start_single_thermal_conductivity_measurement_async();
    CHECK_EQUAL_ZERO_TEXT(
        local_error, "start_single_thermal_conductivity_measurement_async");
    local_error = sf06_lf_read_thermal_conductivity_measurement_data(
        &thermal_conductivity, &raw_temperature, &raw_delta_temperature);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "read_thermal_conductivity_measurement_data");
    printf("thermal_conductivity: %i ", thermal_conductivity);
    printf("raw_temperature: %i ", raw_temperature);
    printf("raw_delta_temperature: %i\n", raw_delta_temperature);
}

TEST (SF06_LF_Tests, test_start_single_thermal_conductivity_measurement_sync1) {
    int16_t local_error = 0;
    int16_t thermal_conductivity = 0;
    int16_t raw_temperature = 0;
    int16_t raw_delta_temperature = 0;
    local_error = sf06_lf_start_single_thermal_conductivity_measurement_sync();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_single_thermal_conductivity_measurement_sync");
    local_error = sf06_lf_read_thermal_conductivity_measurement_data(
        &thermal_conductivity, &raw_temperature, &raw_delta_temperature);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "read_thermal_conductivity_measurement_data");
    printf("thermal_conductivity: %i ", thermal_conductivity);
    printf("raw_temperature: %i ", raw_temperature);
    printf("raw_delta_temperature: %i\n", raw_delta_temperature);
}
